// Prisma schema for NextAuth with Credentials and Neon Postgres
// Models are compatible with @next-auth/prisma-adapter

generator client {
  provider = "prisma-client-js"
}

enum GirlFieldType {
  SELECT
  SELECT_SEARCH
  MULTISELECT
  INPUT
  TEXTAREA
  NUMBER
  SECTION
  GALLERY
}

model GirlField {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  type        GirlFieldType
  required    Boolean       @default(false)
  placeholder String?
  helpText    String?
  options     Json?         // for select types: [{label, value}] or simple string[]
  order       Int           @default(0)
  parentId    String?
  parent      GirlField?    @relation("GirlFieldToSelf", fields: [parentId], references: [id])
  children    GirlField[]   @relation("GirlFieldToSelf")
  // Layout
  containerColumns Int?     // only for SECTION: 1..3
  colSpan          Int?     // for children: 1..3 (<= containerColumns)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Girl {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  // additional top-level properties for Girl could be added later (e.g., name, slug)
  values    GirlFieldValue[]
}

model GirlFieldValue {
  id        String   @id @default(cuid())
  girlId    String
  girl      Girl     @relation(fields: [girlId], references: [id], onDelete: Cascade)
  fieldSlug String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([girlId])
  @@index([fieldSlug])
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          Role     @default(USER)
  password      String?  // hashed password for Credentials provider

  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Settings {
  id                      String  @id @default("singleton")
  siteName                String
  siteDescription         String
  adminEmail              String
  timeZone                String
  dateFormat              String
  timeFormat              String
  logoPath                String?
  faviconPath             String?

  allowRegistration       Boolean @default(true)
  defaultRole             String  @default("author")
  requireEmailVerification Boolean @default(true)

  enableTwoFactorAuth     Boolean @default(false)
  passwordMinLength       Int     @default(8)
  sessionTimeout          Int     @default(30)
}

model Media {
  id          String   @id @default(cuid())
  name        String   @unique   // filename on disk
  url         String              // /medien/<name>
  title       String?
  alt         String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Club {
  id                    String   @id @default(cuid())
  name                  String
  street                String
  houseNumber           String
  zipAndCity            String
  logoPath              String?
  watermarkPath         String?

  clubPhone             String?
  clubMobile            String?
  clubMobileWhatsApp    Boolean  @default(false)
  clubEmail             String?

  jobPhone              String?
  jobMobile             String?
  jobMobileWhatsApp     Boolean  @default(false)
  jobEmail              String?
  jobContactPerson      String?

  openingHours          Json

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
